group 'RLBot'
version '0.0.1'

apply plugin: 'java'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.google.protobuf'

def protoVersion = '3.1.0'
def upload_type = 'java'
def repoVersion = version


def apiFile = new File('apikey')
def apikey = ''
if (apiFile.exists()) {
    apikey = apiFile.text
}



repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:' + protoVersion
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.4'
        classpath "com.ullink.gradle:gradle-nuget-plugin:2.15"
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:' + protoVersion
    }
    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each {
            task ->
                task.builtins {
                    python { }
                    cpp {}
                    java {}
                }
        }
    }
    generatedFilesBaseDir = '$projectDir/generated/'
}

bintray {
    user = 'rlbotofficial'
    key = apikey
    publish = true
    pkg {
        name = 'generatedFiles'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/RLBot/RLBotProtobuf.git'
        version {
            name = repoVersion
            released = new Date()
            vcsTag = repoVersion
        }
    }
}


if (upload_type == 'python') {
    bintray.pkg.repo = 'RLBotProto'
    bintray.filesSpec {
        from 'src/main'
        from 'generated/main'
        into 'generated'
    }
}

task zipFolder(type: Zip) {
    from 'generated/main'
    from 'src/main'
    into 'generated'
    archiveName 'result.zip'
}


if (upload_type == 'java') {
    apply plugin: "maven-publish"
    publishing {
        publications {
            MyPublication(MavenPublication) {
                groupId 'RLBot'
                artifactId 'Framework.proto'
                version = repoVersion
                artifact(zipFolder) {
                    classifier "src"
                    extension "zip"
                }
            }
        }
    }
    bintray.publications = ['MyPublication']
    bintray.pkg.repo = 'RLBotProtoMaven'
}


if (upload_type == 'nuget') {
    bintray.pkg.repo = 'RLBotProtoNuget'
    // TODO(tareheart): nuget packaging
    // nuget stuff here
    // https://github.com/Ullink/gradle-nuget-plugin
}
